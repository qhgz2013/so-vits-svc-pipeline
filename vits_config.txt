{
  "file": { // {id: path} dict
    "input": string, // input file
    "output": string, // output file
  }
  "sys": {
    "work_dir": string, // temp directory for saving on-the-fly audio files
    "intermediate_file_ext": string // fix to ".wav" since vits will always convert others to wav
  },
  "vits": {
    "src_dir": string, // path to so-vits-svc source
    // args for so-vits-svc 4.0 inference
    "profile": {
      "${profile_name}: { // "default"
        // basic config
        "model_path": string,
        "config_path": string,
        "clip": float,
        "trans": [int],
        // optional config
        "auto_predict_f0": bool,
        "cluster_model_path": string,
        "cluster_infer_ratio": float,
        "linear_gradient": float,
        "f0_predictor": string,
        "enhance": bool,
        "shallow_diffusion": bool,
        "use_spk_mix": bool,
        "loudness_envelope_adjustment": float,
        "feature_retrieval": bool,
        // diffusion config
        "diffusion_model_path": string,
        "diffusion_config_path": string,
        "k_step": int,
        "second_encoding": bool,
        "only_diffusion": bool,
        // others
        "slice_db": int,
        "device": string, // leave null for auto choose
        "noice_scale": float,
        "pad_seconds": float,
        "linear_gradient_retain": float,
        "enhancer_adaptive_key": int,
        "f0_filter_threshold": float
      }
    }
  },
  "down_mix": { // VITS
    "separate_process": bool, // split L and R channel during vits conversion (recommended true for stereo vocal output, but twice processing time is needed)
    "vocal": [ // vocal tracks (will run VITS-SVC)
      {
        "id": string, // vocal file id to run VITS-SVC and then perform down mix
        "profile": string, // (optional) specify VITS profile for this file id, leave null to use global profile specified by CLI argument
        "spk_list": {
          "${spk_name}": [
            {
              "channel": string or [string] // "L", or "R" or null (for separate_process == false)
              "weight": float, // loudness weight
              "delay": int // ms
            }
          ]
        }
      }
    ],
    "inst": [ // instrumental tracks (bypass VITS-SVC)
      {
        "id": string, // instrumental file id for down mix
        "weight": float // loudness weight for this track
      }
    ]
  }
  "ffmpeg": { // ffmpeg config
    "ffmpeg_path": string, // null for auto-detect
    "ffprobe_path": string, // null for auto-detect
  },
  "uvr": {
    "enable": bool,
    "api_url": string,
    "pipeline": [
      {
        "input_id": [string], // file_id or file_id#channel (channel="L" or "R")
        "output_id": [string or output_obj], // input_id and output_id must have same length
        "config_source": string, // "file" or "data"
        "config_file": string, // set to config path when config_source == "file"
        "config_data": {...} // UVR env data when config_source == "data"
      }
    ]
  }
}

// output_obj:
{
  "${stem}": string
}
